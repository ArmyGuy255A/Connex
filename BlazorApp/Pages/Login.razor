@page "/login"
@using Infrastructure.Identity
@using Microsoft.AspNetCore.Identity
@* @inject ApplicationSignInManager SignInManager *@
@inject SignInManager<IdentityUser> SignInManager
@inject NavigationManager NavigationManager

@layout PageLayout

<PageTitle>Login</PageTitle>


@* <div class="page page-center"> *@
<div class="container container-tight py-4">
    <div class="text-center mb-4">
        <a href="." class="navbar-brand navbar-brand-autodark">
            <img src="badge.png" width="187" height="200" alt="Tabler" class="">
        </a>
    </div>
    <div class="card card-md">
        <div class="card-body">
            <h2 class="h2 text-center mb-4">Login to your account</h2>
            @if (!string.IsNullOrEmpty(loginModel.Message))
            {
                <h3 class="h3 text-center text-warning">@loginModel.Message</h3>
            }

            <form autocomplete="on" class="needs-validation" onsubmit="@HandleLogin">
                <div class="mb-3">
                    <label class="form-label">Email address</label>
                    <InputText id="username" @bind-Value="@loginModel.UserName" type="email" class="form-control" placeholder="your@email.com" autocomplete="on"/>
                </div>
                <div class="mb-2">
                    <label class="form-label">
                        Password
                        <span class="form-label-description">
                            <a href="./forgot-password.html">I forgot password</a>
                        </span>
                    </label>
                    <div class="input-group input-group-flat">
                        <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Your password" autocomplete="off"/>
                        <span class="input-group-text">
                            <a href="#" class="link-secondary" data-bs-toggle="tooltip" aria-label="Show password" data-bs-original-title="Show password">
                                <!-- Download SVG icon from http://tabler-icons.io/i/eye -->
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path><path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6"></path>
                                </svg>
                            </a>
                        </span>
                    </div>
                </div>
                <div class="mb-2">
                    <label class="form-check">
                        <input type="checkbox" class="form-check-input">
                        <span class="form-check-label">Remember me on this device</span>
                    </label>
                </div>
                <div class="form-footer">
                    <button type="submit" class="btn btn-primary w-100">Sign in</button>
                </div>
            </form>
        </div>
        <div class="hr-text">or</div>
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <TablerButton InDivElement="false" href="/login/keycloak">
                        <img src="images/keycloak_icon_512px.svg" class="icon" width="25" height="25"/>
                        Login with KeyCloak
                    </TablerButton>
                </div>
                <div class="col">
                    <TablerButton InDivElement="false" href="/login/adfs">
                        <TablerIcon Icon="brand-windows"></TablerIcon>
                        Login with AD FS
                    </TablerButton>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();

    private async Task HandleLogin()
    {
        try
        {
            if (string.IsNullOrEmpty(loginModel.UserName))
            {
                loginModel.Message = "Missing Username";
                return;
            }

            if (string.IsNullOrEmpty(loginModel.Password))
            {
                loginModel.Message = "Missing Password";
                return;
            }

            var result = await SignInManager.PasswordSignInAsync(loginModel.UserName, loginModel.Password, true, false);
            if (result.Succeeded)
            {
                // SignInManager.SignInAsync()
                NavigationManager.NavigateTo("/");
            }
            else
            {
                // Handle login failure
                loginModel.Message = "Login Error";
            }
        }
        catch (Exception ex)
        {
            // Log the exception or handle it as appropriate
            loginModel.Message = $"An error occurred: {ex.Message}";
        }
    }

    public class LoginModel
    {
        public string UserName { get; set; }
        public string Password { get; set; }
        public string Message { get; set; }
    }

}