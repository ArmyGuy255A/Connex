@page "/Login"
@using Infrastructure.Identity
@using Microsoft.AspNetCore.Identity
@using Domain.Entities
@using Infrastructure.Services
@using Tablazor
@using System.Security.Claims
@using Tablazor.Pages
@* @inject ApplicationSignInManager SignInManager *@
@inject SignInManager<ApplicationUser> SignInManager
@inject NavigationManager NavigationManager
@* @inject TablazorJsInterop JsInterop *@
@* @inject IHttpClientFactory ClientFactory *@
@inject AuthenticationService AuthenticationService
@inherits OwningComponentBase

@layout PageLayout

<PageTitle>Login</PageTitle>


@* <div class="page page-center"> *@
<div class="container container-tight py-4">
    <div class="text-center mb-4">
        <a href="." class="navbar-brand navbar-brand-autodark">
            <img src="badge.png" width="187" height="200" alt="Tabler" class="">
        </a>
    </div>
    <div class="card card-md">
        <div class="card-body">
            <h2 class="h2 text-center mb-4">Login to your account</h2>
            @if (!string.IsNullOrEmpty(loginModel.Message))
            {
                <h3 class="h3 text-center text-warning">@loginModel.Message</h3>
            }

            <form autocomplete="on" class="needs-validation">
                <div class="mb-3">
                    <label class="form-label">Email address</label>
                    <InputText id="username" @bind-Value="@loginModel.UserName" type="email" class="form-control" placeholder="your@email.com" autocomplete="on"/>
                </div>
                <div class="mb-2">
                    <label class="form-label">
                        Password
                        <span class="form-label-description">
                            <a href="./forgot-password.html">I forgot password</a>
                        </span>
                    </label>
                    <div class="input-group input-group-flat">
                        <InputText type="password" id="password" class="form-control" @bind-Value="loginModel.Password" placeholder="Your password" autocomplete="off"/>
                        <span class="input-group-text">
                            <a href="#" class="link-secondary" data-bs-toggle="tooltip" aria-label="Show password" data-bs-original-title="Show password">
                                <!-- Download SVG icon from http://tabler-icons.io/i/eye -->
                                <svg xmlns="http://www.w3.org/2000/svg" class="icon" width="24" height="24" viewBox="0 0 24 24" stroke-width="2" stroke="currentColor" fill="none" stroke-linecap="round" stroke-linejoin="round">
                                    <path stroke="none" d="M0 0h24v24H0z" fill="none"></path><path d="M10 12a2 2 0 1 0 4 0a2 2 0 0 0 -4 0"></path><path d="M21 12c-2.4 4 -5.4 6 -9 6c-3.6 0 -6.6 -2 -9 -6c2.4 -4 5.4 -6 9 -6c3.6 0 6.6 2 9 6"></path>
                                </svg>
                            </a>
                        </span>
                    </div>
                </div>
                <div class="mb-2">
                    <label class="form-check">
                        <input type="checkbox" class="form-check-input">
                        <span class="form-check-label">Remember me on this device</span>
                    </label>
                </div>
                <div class="form-footer">
                    <button type="submit" class="btn btn-primary w-100" @onclick="SignIn">Sign in</button>
                </div>
            </form>
        </div>
        <div class="hr-text">or</div>
        <div class="card-body">
            <div class="row">
                <div class="col">
                    <TablerButton InDivElement="false" href="/login/keycloak">
                        <img src="images/keycloak_icon_512px.svg" class="icon" width="25" height="25"/>
                        Login with KeyCloak
                    </TablerButton>
                </div>
                <div class="col">
                    <TablerButton InDivElement="false" href="/login/adfs">
                        <TablerIcon Icon="brand-windows"></TablerIcon>
                        Login with AD FS
                    </TablerButton>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private LoginModel loginModel = new LoginModel();
    public string userIdentifier = "Admin";
    
    private bool shouldRender;
    protected override bool ShouldRender() => shouldRender;
    
    private AuthenticationService? _authService { get; set; }

    protected override async Task OnInitializedAsync()
    {
        _authService = ScopedServices.GetRequiredService<AuthenticationService>();
        

        // message = await ExampleService.ExampleMethod(AuthenticationStateProvider);
    }
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            Console.WriteLine("Hmmm");
        }
    }

    private void SignIn()
    {
        var signInManager = ScopedServices.GetRequiredService<SignInManager<ApplicationUser>>();
        shouldRender = false;
        var r = signInManager.PasswordSignInAsync(loginModel.UserName, loginModel.Password, isPersistent: true, lockoutOnFailure: false);
        Thread.Sleep(2000);

        var result = _authService.Login(loginModel.UserName, loginModel.Password);
        result = _authService.Login(loginModel.UserName, loginModel.Password);
        // var currentUser = AuthenticationService.CurrentUser;
        //
        // var identity = new ClaimsIdentity(
        //     new[]
        //     {
        //         new Claim(ClaimTypes.Name, userIdentifier),
        //     },
        //     "Custom Authentication");
        //
        // var newUser = new ClaimsPrincipal(identity);
        //
        // AuthenticationService.CurrentUser = newUser;
        
        shouldRender = true;

    }
    
    // private async Task HandleLogin()
    // {
    //     shouldRender = false;
    //     try
    //     {
    // // Create the login model
    //         var loginModelToSend = new LoginModel
    //         {
    //             UserName = loginModel.UserName,
    //             Password = loginModel.Password
    //         };
    //
    // // Perform the API call
    //         var httpClient = ClientFactory.CreateClient();
    //
    //         var response = await httpClient.PostAsJsonAsync("http://localhost:5041/api/Account/Login", loginModelToSend);
    //
    // // Check the response
    //         if (response.IsSuccessStatusCode)
    //         {
    // // Navigate to the home page or do other tasks
    //             NavigationManager.NavigateTo("/");
    //         }
    //         else
    //         {
    //             loginModel.Message = "Login failed. Please try again.";
    //         }
    //     }
    //     catch (Exception ex)
    //     {
    //         loginModel.Message = $"An error occurred: {ex.Message}";
    //         // shouldRender = true;
    //     }
    //     shouldRender = true;
    // }


    // private async Task HandleLogin()
    // {
    //     try
    //     {
    //         try
    //         {
    //             var result = await JsInterop.PostLoginData( "http://localhost:5041/api/Account/Login", loginModel.UserName, loginModel.Password);
    //         
    //             // Handle the result
    //         }
    //         catch (Exception ex)
    //         {
    //             loginModel.Message = $"An error occurred: {ex.Message}";
    //         }
    //         
    //         // if (SignInManager.Context.Response.HasStarted)
    //         // {
    //         //     // Log or handle the fact that the response has already started.
    //         //     return;
    //         // }
    //         // if (string.IsNullOrEmpty(loginModel.UserName))
    //         // {
    //         //     loginModel.Message = "Missing Username";
    //         //     return;
    //         // }
    //         //
    //         // if (string.IsNullOrEmpty(loginModel.Password))
    //         // {
    //         //     loginModel.Message = "Missing Password";
    //         //     return;
    //         // }
    //         //
    //         // var result = await SignInManager.PasswordSignInAsync(loginModel.UserName, loginModel.Password, true, false);
    //         // if (result.Succeeded)
    //         // {
    //         //     // SignInManager.SignInAsync()
    //         //     NavigationManager.NavigateTo("/");
    //         // }
    //         // else
    //         // {
    //         //     // Handle login failure
    //         //     loginModel.Message = "Login Error";
    //         // }
    //     }
    //     catch (Exception ex)
    //     {
    //         // Log the exception or handle it as appropriate
    //         loginModel.Message = $"An error occurred: {ex.Message}";
    //     }
    // }

    public class LoginModel
    {
        public string UserName { get; set; }
        public string Password { get; set; }
        public string Message { get; set; }
    }

}